// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  first_name       String
  last_name        String
  email            String         @unique
  password         String
  is_disabled      Boolean
  role             Role[]
  projects         Project[]
  task             Task[]
  files            File[]
  task_comments    Comment[]      @relation("task_comments")
  project_comments Comment[]      @relation("project_comments")
  invitations      Invitation[]
  notifications    Notification[]
}

model Project {
  id               String       @id @default(uuid())
  users            User[]          
  ownerId          String
  title            String
  description      String
  private          Boolean
  is_disabled      Boolean
  status_project   Status
  total_time_spent Int
  start_date       DateTime
  end_date         DateTime
  due_date         DateTime
  tasks            Task[]
  files            File[]
  comments         Comment[]
  invitations      Invitation[]
}

model Task {
  id               String    @id @default(uuid())
  title            String
  description      String
  private          Boolean
  is_disabled      Boolean
  status_task      Status
  total_time_spent Int
  start_date       DateTime
  end_date         DateTime
  user             User      @relation(fields: [userId], references: [id])
  userId           String
  project          Project   @relation(fields: [projectId], references: [id])
  projectId        String
  files            File[]
  comments         Comment[]
}

model Comment {
  id                    String   @id @default(uuid())
  is_disabled           Boolean
  content               String
  user_id               String?
  project               Project? @relation(fields: [project_id], references: [id])
  project_id            String?
  task                  Task?    @relation(fields: [task_id], references: [id])
  task_id               String?
  user_task_comments    User?     @relation("task_comments", fields: [user_id], references: [id])
  user_project_comments User?     @relation("project_comments", references: [id], fields: [userId])
  userId                String?
}

model File {
  id          String  @id @default(uuid())
  name        String
  path        String
  size        Int
  type        String
  user        User    @relation(fields: [userId], references: [id])
  userId      String
  project     Project @relation(fields: [projectId], references: [id])
  projectId   String
  task        Task?    @relation(fields: [taskId], references: [id])
  taskId      String
  is_disabled Boolean
}

model Invitation {
  id        String            @id @default(uuid())
  status    Status_Invitation
  email     String
  project   Project           @relation(fields: [projectId], references: [id])
  projectId String
  user      User              @relation(fields: [userId], references: [id])
  userId    String
}

model Notification {
  id           String              @id @default(uuid())
  is_disabled  Boolean
  title        String
  content      String
  user         User                @relation(fields: [userId], references: [id])
  userId       String
  type         Type_Notification
  status       Status_Notification
  reference_id String
  senderId     String
}

enum Status_Invitation {
  PENDING
  ACCEPTED
  REJECTED
}

enum Status {
  IN_PROGRESS
  NOT_STARTED
  FIHISHED
}

enum Status_Notification {
  READ
  UNREAD
}

enum Role {
  SUPER_ADMIN
  ADMIN
  MANAGER
  USER
}

enum Type_Notification {
  PROJECT
  TASK
}
