// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../src/generated/graphql"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @default(uuid())
  first_name         String
  last_name          String
  email              String          @unique
  phone_number       String?
  cover_picture      String?
  /// @TypeGraphQL.omit(output: true)
  password           String
  is_disabled        Boolean
  avatar             String?
  role               Role[]
  projects           Project[]
  tasks              Task[]
  files              File[]
  task_comments      Comment[]       @relation("task_comments")
  project_comments   Comment[]       @relation("project_comments")
  invitations        Invitation[]
  notifications      Notification[]
  owned_projects     Project[]       @relation("project_owner")
  notifications_sent Notification[]  @relation("notification_sender")
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
  ResetPassword      ResetPassword[]
}

model Project {
  id               String       @id @default(uuid())
  users            User[]
  owner            User         @relation("project_owner", fields: [project_owner_id], references: [id])
  project_owner_id String
  title            String
  description      String
  private          Boolean
  is_disabled      Boolean
  status_project   Status
  total_time_spent Int          @default(0)
  start_date       DateTime
  end_date         DateTime
  due_date         DateTime
  tasks            Task[]
  files            File[]
  comments         Comment[]
  invitations      Invitation[]
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
}

model Task {
  id               String    @id @default(uuid())
  title            String
  description      String
  private          Boolean
  is_disabled      Boolean
  status_task      Status
  total_time_spent Int
  start_date       DateTime
  end_date         DateTime
  user             User?     @relation(fields: [user_id], references: [id])
  user_id          String?
  project          Project   @relation(fields: [project_id], references: [id])
  project_id       String
  files            File[]
  comments         Comment[]
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
}

model Comment {
  id                      String   @id @default(uuid())
  is_disabled             Boolean
  content                 String
  task_comment_user_id    String?
  project                 Project? @relation(fields: [project_id], references: [id])
  project_id              String?
  task                    Task?    @relation(fields: [task_id], references: [id])
  task_id                 String?
  user_task_comments      User?    @relation("task_comments", fields: [project_comment_user_id], references: [id])
  user_project_comments   User?    @relation("project_comments", references: [id], fields: [task_comment_user_id])
  project_comment_user_id String?
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt
}

model File {
  id          String   @id @default(uuid())
  name        String
  path        String
  size        Int
  type        String
  user        User?    @relation(fields: [user_id], references: [id])
  user_id     String?
  project     Project  @relation(fields: [project_id], references: [id])
  project_id  String
  task        Task?    @relation(fields: [task_id], references: [id])
  task_id     String?
  is_disabled Boolean
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Invitation {
  id         String            @id @default(uuid())
  status     Status_Invitation
  email      String
  project    Project           @relation(fields: [project_id], references: [id])
  project_id String
  user       User?             @relation(fields: [user_id], references: [id])
  user_id    String?
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt
}

model Notification {
  id           String              @id @default(uuid())
  is_disabled  Boolean
  title        String
  content      String
  user         User?               @relation(fields: [user_id], references: [id])
  user_id      String?
  type         Type_Notification
  status       Status_Notification
  reference_id String
  sender       User                @relation("notification_sender", fields: [sender_id], references: [id])
  sender_id    String
  created_at   DateTime            @default(now())
  updated_at   DateTime            @updatedAt
}

model ResetPassword {
  id         String   @id @default(uuid())
  /// @TypeGraphQL.omit(output: true, input: true)
  user       User     @relation(fields: [user_id], references: [id])
  /// @TypeGraphQL.omit(output: true, input: true)
  user_id    String
  /// @TypeGraphQL.omit(output: true, input: true)
  token      String   @unique
  /// @TypeGraphQL.omit(output: true, input: true)
  created_at DateTime @default(now())
  /// @TypeGraphQL.omit(output: true, input: true)
  updated_at DateTime @updatedAt
}

enum Status_Invitation {
  PENDING
  ACCEPTED
  REJECTED
}

enum Status {
  IN_PROGRESS
  NOT_STARTED
  FIHISHED
}

enum Status_Notification {
  READ
  UNREAD
}

enum Role {
  SUPER_ADMIN
  ADMIN
  MANAGER
  USER
}

enum Type_Notification {
  PROJECT
  TASK
  INVITATION
}
